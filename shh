#! /bin/bash

# Encrypt password
encrypt_password() {
    local PASSWORD="$1"; local SECRET_KEY="$2"

    encrypted_password=$(echo -n "$PASSWORD" | openssl enc -aes-256-cbc -a -pbkdf2 -salt -pass "pass:$SECRET_KEY")

    echo "$encrypted_password"
}

# Decrypt password
decrypt_password() {
    local ENCRYPTED_PASSWORD="$1"; local SECRET_KEY="$2"

    DECRYPTED_PASSWORD=$(echo "$ENCRYPTED_PASSWORD" | openssl enc -d -aes-256-cbc -a -pbkdf2 -salt -pass "pass:$SECRET_KEY")

    echo "$DECRYPTED_PASSWORD"
}

check_args() {
	NAME=$1; USERNAME=$2 PASSWORD=$3;

	# Check if name is provided
	if [ -z "$NAME" ]; then
		echo "‚ùå Name is required!"; exit 1
	fi

	# Check if the database file exists
	if [ ! -f "$DB_FILE_PATH" ]; then
		echo "‚ùå Database not found at path! Creating the database at ${DB_FILE_PATH}..."
		touch "$DB_FILE_PATH" || { echo "‚ùå Error creating the database file"; exit 1; }
		echo "‚úÖ Database successfully created at ${DB_FILE_PATH}!"
	fi
}

find_credentials() {
	local LINE=$(grep -i "$NAME" "$DB_FILE_PATH"); local USERNAME=$(echo "${LINE}" | awk '{print $3}'); local PASSWORD=$(echo "${LINE}" | awk '{print $4}')

	# Check if the password is found
	if [ -z "$PASSWORD" ]; then
		echo "‚ùå Password not found for $NAME!"
	else
		echo "Username: ${USERNAME} üòä"
		echo "Password found! Decrypting... üòä"
		echo $(decrypt_password "$PASSWORD" "$ENCRYPTION_KEY") | xclip -selection clipboard
		echo "Password copied to clipboard!"
	fi
}

# Function to add a new entry in the database
create_credentials() {
	local LINE=$(grep -in "$NAME" "$DB_FILE_PATH")

	local ID=$(pwgen 15 1)

	if [[ ! -z "$LINE" ]]; then
		echo "‚ùå Entry already exists!"; exit 1
	else
		echo "‚úÖ Adding credentials... üöÄ"

		local ENCRYPTED_PASSWORD=$(encrypt_password "$PASSWORD" "$ENCRYPTION_KEY")
		echo "${ID} ${NAME} ${USERNAME} ${ENCRYPTED_PASSWORD}" >> $DB_FILE_PATH

		echo "‚úÖ Credentials added successfully! üéâ"
	fi
}

delete_credentials() {
	local NAME=$1; local ENTRY=$(grep -in "^$NAME" "$DB_FILE_PATH")

	if [[ -z "$ENTRY" ]]; then
		echo "‚ùå Entry doesn't exist."; exit 1
	else
		local LINE_NUMBER=$(echo "$ENTRY" | cut -d':' -f1)
		sed -i "${LINE_NUMBER}d" $DB_FILE_PATH
		echo "‚úÖ Entry deleted successfully! üóëÔ∏è"
	fi
}

main() {
	BASEDIR=$(dirname "$0")

	# Load environment variables from .env file
	if [ -f "${BASEDIR}/.env" ]; then
		source "${BASEDIR}/.env"
	fi

	case $1 in
		--delete | del | rm | remove | delete)
			if [ -z "$2" ]; then
				echo "‚ùå You need to provide the id of the entry to delete. üö´"; exit 1
			else
				shift; delete_credentials $1; exit 1
			fi
		;;
		--list | ls)
			cat "$DB_FILE_PATH"; exit 1
		;;
	esac

	NAME=$1; USERNAME=$2 PASSWORD=$3;
	check_args "$@"

	if [[ -z "$PASSWORD" && -z "$USERNAME" ]]; then
		# If password is not provided it means we need to find the password for the provided site.
		find_credentials
	else
		# If password is provided we need to either update and existing entry or create an existing entry.
		create_credentials
	fi
}

# Run the main function
main "$@"
